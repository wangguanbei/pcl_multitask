// Generated by gencpp from file geometry_msgs/gnss_heading.msg
// DO NOT EDIT!


#ifndef GEOMETRY_MSGS_MESSAGE_GNSS_HEADING_H
#define GEOMETRY_MSGS_MESSAGE_GNSS_HEADING_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace geometry_msgs
{
template <class ContainerAllocator>
struct gnss_heading_
{
  typedef gnss_heading_<ContainerAllocator> Type;

  gnss_heading_()
    : header()
    , measurement_time(0.0)
    , solution_status(0)
    , position_type(0)
    , baseline_length(0.0)
    , heading(0.0)
    , pitch(0.0)
    , reserved(0.0)
    , heading_std_dev(0.0)
    , pitch_std_dev(0.0)
    , station_id(0.0)
    , satellite_tracked_number(0)
    , satellite_soulution_number(0)
    , satellite_number_obs(0)
    , satellite_number_multi(0)
    , solution_source(0)
    , extended_solution_status(0)
    , galileo_beidou_sig_mask(0)
    , gps_glonass_sig_mask(0)  {
    }
  gnss_heading_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , measurement_time(0.0)
    , solution_status(0)
    , position_type(0)
    , baseline_length(0.0)
    , heading(0.0)
    , pitch(0.0)
    , reserved(0.0)
    , heading_std_dev(0.0)
    , pitch_std_dev(0.0)
    , station_id(0.0)
    , satellite_tracked_number(0)
    , satellite_soulution_number(0)
    , satellite_number_obs(0)
    , satellite_number_multi(0)
    , solution_source(0)
    , extended_solution_status(0)
    , galileo_beidou_sig_mask(0)
    , gps_glonass_sig_mask(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _measurement_time_type;
  _measurement_time_type measurement_time;

   typedef uint32_t _solution_status_type;
  _solution_status_type solution_status;

   typedef uint32_t _position_type_type;
  _position_type_type position_type;

   typedef float _baseline_length_type;
  _baseline_length_type baseline_length;

   typedef float _heading_type;
  _heading_type heading;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _reserved_type;
  _reserved_type reserved;

   typedef float _heading_std_dev_type;
  _heading_std_dev_type heading_std_dev;

   typedef float _pitch_std_dev_type;
  _pitch_std_dev_type pitch_std_dev;

   typedef float _station_id_type;
  _station_id_type station_id;

   typedef uint32_t _satellite_tracked_number_type;
  _satellite_tracked_number_type satellite_tracked_number;

   typedef uint32_t _satellite_soulution_number_type;
  _satellite_soulution_number_type satellite_soulution_number;

   typedef uint32_t _satellite_number_obs_type;
  _satellite_number_obs_type satellite_number_obs;

   typedef uint32_t _satellite_number_multi_type;
  _satellite_number_multi_type satellite_number_multi;

   typedef uint32_t _solution_source_type;
  _solution_source_type solution_source;

   typedef uint32_t _extended_solution_status_type;
  _extended_solution_status_type extended_solution_status;

   typedef uint32_t _galileo_beidou_sig_mask_type;
  _galileo_beidou_sig_mask_type galileo_beidou_sig_mask;

   typedef uint32_t _gps_glonass_sig_mask_type;
  _gps_glonass_sig_mask_type gps_glonass_sig_mask;




  typedef boost::shared_ptr< ::geometry_msgs::gnss_heading_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::geometry_msgs::gnss_heading_<ContainerAllocator> const> ConstPtr;

}; // struct gnss_heading_

typedef ::geometry_msgs::gnss_heading_<std::allocator<void> > gnss_heading;

typedef boost::shared_ptr< ::geometry_msgs::gnss_heading > gnss_headingPtr;
typedef boost::shared_ptr< ::geometry_msgs::gnss_heading const> gnss_headingConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::geometry_msgs::gnss_heading_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::geometry_msgs::gnss_heading_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace geometry_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/home/apollo_ros_bridge/ros_pkgs/src/common_msgs-indigo-devel/geometry_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::geometry_msgs::gnss_heading_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::geometry_msgs::gnss_heading_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::geometry_msgs::gnss_heading_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::geometry_msgs::gnss_heading_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::geometry_msgs::gnss_heading_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::geometry_msgs::gnss_heading_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::geometry_msgs::gnss_heading_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4e89975d04b170f1910f2b8b312e6db4";
  }

  static const char* value(const ::geometry_msgs::gnss_heading_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4e89975d04b170f1ULL;
  static const uint64_t static_value2 = 0x910f2b8b312e6db4ULL;
};

template<class ContainerAllocator>
struct DataType< ::geometry_msgs::gnss_heading_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/gnss_heading";
  }

  static const char* value(const ::geometry_msgs::gnss_heading_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::geometry_msgs::gnss_heading_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
float64 measurement_time\n\
uint32 solution_status \n\
uint32 position_type\n\
float32 baseline_length\n\
float32 heading\n\
float32 pitch\n\
float32 reserved\n\
float32 heading_std_dev\n\
float32 pitch_std_dev\n\
float32 station_id\n\
uint32 satellite_tracked_number\n\
uint32 satellite_soulution_number\n\
uint32 satellite_number_obs\n\
uint32 satellite_number_multi\n\
uint32 solution_source\n\
uint32 extended_solution_status\n\
uint32 galileo_beidou_sig_mask\n\
uint32 gps_glonass_sig_mask\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::geometry_msgs::gnss_heading_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::geometry_msgs::gnss_heading_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.measurement_time);
      stream.next(m.solution_status);
      stream.next(m.position_type);
      stream.next(m.baseline_length);
      stream.next(m.heading);
      stream.next(m.pitch);
      stream.next(m.reserved);
      stream.next(m.heading_std_dev);
      stream.next(m.pitch_std_dev);
      stream.next(m.station_id);
      stream.next(m.satellite_tracked_number);
      stream.next(m.satellite_soulution_number);
      stream.next(m.satellite_number_obs);
      stream.next(m.satellite_number_multi);
      stream.next(m.solution_source);
      stream.next(m.extended_solution_status);
      stream.next(m.galileo_beidou_sig_mask);
      stream.next(m.gps_glonass_sig_mask);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gnss_heading_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::geometry_msgs::gnss_heading_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::geometry_msgs::gnss_heading_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "measurement_time: ";
    Printer<double>::stream(s, indent + "  ", v.measurement_time);
    s << indent << "solution_status: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.solution_status);
    s << indent << "position_type: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.position_type);
    s << indent << "baseline_length: ";
    Printer<float>::stream(s, indent + "  ", v.baseline_length);
    s << indent << "heading: ";
    Printer<float>::stream(s, indent + "  ", v.heading);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "reserved: ";
    Printer<float>::stream(s, indent + "  ", v.reserved);
    s << indent << "heading_std_dev: ";
    Printer<float>::stream(s, indent + "  ", v.heading_std_dev);
    s << indent << "pitch_std_dev: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_std_dev);
    s << indent << "station_id: ";
    Printer<float>::stream(s, indent + "  ", v.station_id);
    s << indent << "satellite_tracked_number: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.satellite_tracked_number);
    s << indent << "satellite_soulution_number: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.satellite_soulution_number);
    s << indent << "satellite_number_obs: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.satellite_number_obs);
    s << indent << "satellite_number_multi: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.satellite_number_multi);
    s << indent << "solution_source: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.solution_source);
    s << indent << "extended_solution_status: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.extended_solution_status);
    s << indent << "galileo_beidou_sig_mask: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.galileo_beidou_sig_mask);
    s << indent << "gps_glonass_sig_mask: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.gps_glonass_sig_mask);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GEOMETRY_MSGS_MESSAGE_GNSS_HEADING_H
